# ============================================
# URL Monitor - Environment Configuration Template
# ============================================
# Copy this file to .env and configure with your actual values
# This .env.example file is safe to commit to git (no secrets)
# Your .env file should NEVER be committed (it's in .gitignore)

# ===============================================================================
# ENVIRONMENT TYPE: Choose your configuration mode
# ===============================================================================
# LOCAL DEVELOPMENT: Set DEBUG=True, use SQLite, can use Upstash Redis for Celery
# PRODUCTION DEPLOYMENT: Set DEBUG=False, use PostgreSQL, use Upstash Redis
# ===============================================================================

# ==================== Django Core Settings ====================

# SECRET_KEY: Required for Django security (sessions, CSRF, etc.)
# LOCAL: Use the default insecure key (never use in production!)
# PRODUCTION: Generate a new one with:
#   python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SECRET_KEY=django-insecure-om82jgr+sjl+ka$a9e#f=&7*hggkseo&1b(#v&*l#d=!8suicm

# DEBUG: Controls Django debug mode
# LOCAL: Set to True (shows detailed errors, uses simple static file serving)
# PRODUCTION: MUST be False (security requirement, enables WhiteNoise)
DEBUG=True

# ALLOWED_HOSTS: Comma-separated list of domains that can access the app
# LOCAL: localhost,127.0.0.1
# PRODUCTION: Add your deployment domain (e.g., your-app.onrender.com)
ALLOWED_HOSTS=localhost,127.0.0.1

# ==================== Database Configuration ====================

# DATABASE_URL: PostgreSQL connection string
# LOCAL: Leave commented or empty to use SQLite (no setup required)
# PRODUCTION: Render.com sets this automatically for PostgreSQL
# Format: postgresql://user:password@host:port/database
# DATABASE_URL=

# ==================== Redis & Celery Configuration ====================
# Celery is required for automatic URL monitoring checks
# You MUST have a Redis instance for Celery to work

# Option 1: Upstash Redis (RECOMMENDED - Works for both local & production)
# - Free tier available at https://upstash.com/
# - No installation needed, cloud-based
# - Get these values from Upstash Console:
UPSTASH_REDIS_URL=
UPSTASH_REDIS_TOKEN=

# Option 2: Local Redis (ALTERNATIVE for local development only)
# - Requires Redis installed on your machine
# - Download from: https://redis.io/download or use Docker
# - Use this URL format: redis://localhost:6379/0
# REDIS_URL=redis://localhost:6379/0

# Option 3: Upstash Redis Protocol (For Celery broker)
# Use the Redis-compatible endpoint from Upstash (not the REST API)
# Format: rediss://default:TOKEN@HOST:6379 (note the double 's' in rediss)
# Get this from Upstash Console → Redis Details → REST API section
REDIS_URL=

# CELERY_BROKER_URL: Where Celery tasks are queued
# LOCAL: Use REDIS_URL (Upstash or local Redis)
# PRODUCTION: Use REDIS_URL (should be Upstash Redis)
# Should match REDIS_URL value
CELERY_BROKER_URL=

# CELERY_RESULT_BACKEND: Where task results are stored (optional, disabled by default)
# Leave empty to disable result storage (recommended for reliability)
CELERY_RESULT_BACKEND=

# ==================== Email Notifications ====================
# Required for sending URL down alerts via email

# EMAIL_HOST: SMTP server address
# Common options: smtp.gmail.com, smtp.sendgrid.net, smtp.mailgun.org
EMAIL_HOST=smtp.gmail.com

# EMAIL_PORT: SMTP port (587 for TLS, 465 for SSL)
EMAIL_PORT=587

# EMAIL_USE_TLS: Enable TLS encryption (recommended)
EMAIL_USE_TLS=True

# EMAIL_HOST_USER: Your email address / SMTP username
# For Gmail: Use your full Gmail address
EMAIL_HOST_USER=your-email@gmail.com

# EMAIL_HOST_PASSWORD: Your email password / SMTP password
# IMPORTANT: For Gmail, you MUST use an App Password, not your regular password
# Generate at: https://myaccount.google.com/apppasswords
# 1. Go to Google Account → Security → 2-Step Verification
# 2. Scroll to "App passwords" → Generate new app password
# 3. Use the 16-character password here (spaces are optional)
EMAIL_HOST_PASSWORD=your-app-password-here

# ==================== Telegram Notifications (Optional) ====================
# Enable URL down alerts via Telegram bot

# TELEGRAM_BOT_TOKEN: Create a bot with @BotFather on Telegram
# Steps:
# 1. Message @BotFather on Telegram
# 2. Send /newbot and follow the prompts
# 3. Copy the token provided
# 4. Get your chat ID from @userinfobot (send /start to it)
# TELEGRAM_BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz

# ==================== Slack Notifications (Optional) ====================
# Enable URL down alerts via Slack webhook

# SLACK_WEBHOOK_URL: Create an Incoming Webhook in Slack
# Steps:
# 1. Go to Slack workspace settings
# 2. Apps → Manage apps → Incoming Webhooks
# 3. Add to Slack → Choose channel → Copy webhook URL
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXX

# ==================== Logging Configuration ====================

# DJANGO_LOG_LEVEL: Django's logging verbosity
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# LOCAL: DEBUG (shows all logs)
# PRODUCTION: INFO or WARNING (reduces noise)
DJANGO_LOG_LEVEL=INFO

# ===============================================================================
# QUICK START GUIDE
# ===============================================================================
#
# FOR LOCAL DEVELOPMENT:
# ----------------------
# 1. Copy this file: cp .env.example .env
# 2. Keep DEBUG=True
# 3. Use SQLite (no DATABASE_URL needed)
# 4. Set up Upstash Redis:
#    - Sign up at https://upstash.com/ (free tier)
#    - Create a Redis database
#    - Copy the Redis URL and token to REDIS_URL and CELERY_BROKER_URL
#    - Or install Redis locally and use redis://localhost:6379/0
# 5. Configure email settings:
#    - Use Gmail with App Password (see comments above)
#    - Or use another SMTP provider
# 6. Run these commands in SEPARATE terminals:
#    Terminal 1: python manage.py runserver
#    Terminal 2: celery -A url_monitor worker --loglevel=info --pool=solo
#    Terminal 3: celery -A url_monitor beat --loglevel=info
#
# FOR PRODUCTION DEPLOYMENT (Render.com):
# ----------------------------------------
# 1. In Render dashboard, add these environment variables:
#    - DEBUG=False
#    - SECRET_KEY=<generate-new-secret-key>
#    - ALLOWED_HOSTS=your-app.onrender.com
#    - REDIS_URL=<upstash-redis-url>
#    - CELERY_BROKER_URL=<upstash-redis-url>
#    - EMAIL_HOST_USER=<your-email>
#    - EMAIL_HOST_PASSWORD=<your-app-password>
# 2. DATABASE_URL is automatically set by Render (PostgreSQL)
# 3. Render will automatically run:
#    - Web: gunicorn url_monitor.wsgi:application
#    - Worker: celery -A url_monitor worker
#    - Beat: celery -A url_monitor beat
#
# ===============================================================================
#
# TROUBLESHOOTING:
# ----------------
# - If Celery can't connect to Redis:
#   * Check REDIS_URL format is correct (redis:// or rediss:// for SSL)
#   * Verify Upstash Redis is active in your dashboard
#   * Test connection: redis-cli -u <your-redis-url> ping
#
# - If emails aren't sending:
#   * For Gmail, ensure 2-Step Verification is enabled
#   * Use an App Password, not your regular Gmail password
#   * Check EMAIL_HOST and EMAIL_PORT are correct
#
# - If URL checks aren't running:
#   * Make sure both Celery worker AND beat are running
#   * Check logs for connection errors
#   * Verify at least one MonitoredURL exists and is active
#
# ===============================================================================
